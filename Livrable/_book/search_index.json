[
["expressions-regulieres.html", "Chapter 9 Expressions régulières", " Chapter 9 Expressions régulières La problématique : recherche textuelle sur motif Les expressions régulières sont un outil puissant issu du langage PERL pour faire de la recherche textuelle, c’est à dire pour chercher dans un texte donné l’apparition de certaines chaînes de caractères. L’originalité des expressions régulières c’est qu’elles s’apparentent à de la reconnaissance de forme. On se contente de décrire ce qu’on cherche - le motif (‘pattern’) - à l’aide d’une syntaxe spécifique et le moteur de recherche associé aux expressions régulières se charge de traduire ce motif en des itérations, des tests, des reprises après echec, etc. soit au final un véritable petit programme qui aurait nécessité plusieurs, voire de nombreuses instructions sans les expressions régulières. Concrètement une expression régulière est une chaîne de caractères. La nécessité d’une syntaxe pour décrire des motifs un peu compliqués comme par exemple “une suite de chiffres terminés par une virgule”, se concrétise dans le fait que certains caractères ne se représentent pas eux mêmes mais prennent un sens particulier pour guider la recherche. Pour l’exemple cité on dira notamment “\\\\d+,” : la séquence ‘\\\\d’ n’est pas à prendre littéralement mais représente un chiffre décimal quelconque, de même le ‘+’ signifie que ce qui précède (un chiffre décimal) peut être repété, tandis que le ‘,’ signifie bien qu’on cherche à trouver une virgule. Les expressions régulières en R En R les expressions régulières apparaissent principalement dans les fonctions de recherche de la famille ‘grep’, ou de substitution d’un motif par un autre avec les fonctions de la famille ‘gsub’. Mais elles sont aussi mobilisables sur d’autres composantes de l’éco-système R et sont reconnues dans des fonctions telles que celles qui permettent de selectionner des colonnes d’une table. Par ailleurs, beaucoup de fonctions SAS sur les chaînes de caractères n’ont pas leur équivalent en R, mais le recours aux expressions régulières comble le vide avec un outil plus général. Il faut noter que certaines de ces fonctions sur les chaînes de caractères fonctionnent spontanément sur une syntaxe simplifiée et ne reconnaisent pas toute la syntaxe issue de PERL. Il est donc parfois utile de rajouter ‘perl=TRUE’ pour bénéficier de l’intégralité des fonctionnalités. Enfin les chaînes de caractères en R comportent une particularité le ‘\\’ est interprété à la lecture même du programme pour encoder certains caractères spéciaux (tabulation, saut à la ligne, etc.). Ceci nécessite déjà de redoubler le ‘\\’ pour qu’il ne soit pas interprété autrement quand on fournit des chemins d’accès à des fichiers sous Windows. Pour les expressions régulières il faudra faire la même chose. Elements de syntaxe Pour montrer l’effet de la reconnaissance de motif on va utiliser ‘gsub’ dans les exemples suivants. La fonction remplace dans le troisième paramètre, partout où elle le trouve le motif fourni par le premier paramètre par ce qui est fourni en second paramètre (ici ‘&lt;TRUC&gt;’). Ce qui suit ne porte que sur les éléments les plus utilisés. Débuts et fins de chaîne # Le métacaractère ^ : un &#39;a&#39; mais seulement en DEBUT DE CHAINE gsub(&quot;^a&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;anormale&quot;) ## [1] &quot;&lt;TRUC&gt;normale&quot; # Le métacaractère $ : un &#39;e&#39; mais seuelement en FIN DE CHAINE gsub(&quot;e$&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;elementaire&quot;) ## [1] &quot;elementair&lt;TRUC&gt;&quot; Joker # Le métacaractère . : un &#39;e&#39; suivi de n&#39;importe quel caractère gsub(&quot;e.&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;elementaire&quot;) ## [1] &quot;&lt;TRUC&gt;&lt;TRUC&gt;&lt;TRUC&gt;taire&quot; Familles de caractères # La séquence \\d : un chiffre décimal gsub(&quot;\\\\d&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;2C534&quot;) ## [1] &quot;&lt;TRUC&gt;C&lt;TRUC&gt;&lt;TRUC&gt;&lt;TRUC&gt;&quot; # La séquence \\D : tout sauf un chiffre décimal gsub(&quot;\\\\D&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;2C534&quot;) ## [1] &quot;2&lt;TRUC&gt;534&quot; # Les métacaractères [] : une liste de caractères gsub(&quot;[oe]&quot;,&quot;&quot;,&quot;Concrètement&quot;) ## [1] &quot;Cncrètmnt&quot; # Les métacaractères [] : une plage de caractères (plus une liste d&#39;un caractère) gsub(&quot;[a-nè]&quot;,&quot;&quot;,&quot;Concrètement&quot;) ## [1] &quot;Cortt&quot; # ...et leur négation : tout sauf la plage et la liste gsub(&quot;[^a-nè]&quot;,&quot;&quot;,&quot;Concrètement&quot;) ## [1] &quot;ncèemen&quot; Répétitions # Le métacaractère ? : un &#39;a&#39; suivi de ZERO OU UNE OCCURRENCE d&#39;un &#39;l&#39; gsub(&quot;al?&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;anormale&quot;) ## [1] &quot;&lt;TRUC&gt;norm&lt;TRUC&gt;e&quot; # Le métacaractère * : un &#39;e&#39; suivi de ZERO OU PLUSIEURS OCCURRENCE d&#39;un &#39;s&#39; gsub(&quot;es*&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;expression&quot;) ## [1] &quot;&lt;TRUC&gt;xpr&lt;TRUC&gt;ion&quot; # Le métacaractère + : un &#39;e&#39; suivi d&#39;UNE OU PLUSIEURS OCCURRENCE d&#39;un &#39;s&#39; gsub(&quot;es+&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;expression&quot;) ## [1] &quot;expr&lt;TRUC&gt;ion&quot; Le métacaractère ’*’ est “gourmand” : il cherche à attraper autant qu’il peut, ce qui peut parfois être génant. Un contournement est l’utilisation de la répétition “paresseuse” qui attrape le minimum nécessaire à la réalisation du motif. # Version gourmande : .* attrape tout jusqu&#39;au &#39;e&#39; final, y compris les &#39;e&#39; intermédiaires. gsub(&quot;.*e&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;elementaire&quot;) ## [1] &quot;&lt;TRUC&gt;&quot; # Version paresseuse : .*? attrape jusqu&#39;à ce qu&#39;elle trouve un &#39;e&#39; gsub(&quot;.*?e&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;elementaire&quot;) ## [1] &quot;&lt;TRUC&gt;&lt;TRUC&gt;&lt;TRUC&gt;&lt;TRUC&gt;&quot; Groupes Il est possible d’indiquer que la reconnaissance d’une partie d’un motif constitue une fin en soi et que le résultat doit être mémorisé par le moteur de recherche pour un usage ultérieur. Ceci est utile soit pour faire porter un métacaractère de répétition sur plus d’un caractère, soit pour faire référence au sous-motif quelque part ailleurs. # un &#39;r&#39; éventuellement suivi de &#39;ac&#39; gsub(&quot;r(ac)?&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;metacaractere&quot;) ## [1] &quot;metaca&lt;TRUC&gt;te&lt;TRUC&gt;e&quot; # n&#39;importe quel caractère (sous-motif numéro 1) mais redoublé gsub(&quot;(.)\\\\1&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;expression&quot;) ## [1] &quot;expre&lt;TRUC&gt;ion&quot; # Un exemple complexe : # Les [] permettent aussi de désactiver la significaton de certains metacaractères # Le (?1) permet de faire référence au premier sous-motif (pas sa valeur contrairement à \\1) # ...depuis l&#39;interieur même du sous-motif : la recherche est donc recursive gsub(&quot;([a-z][(]([a-z]|(?1))[)])&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;f(g(h))&quot;,perl=TRUE) ## [1] &quot;&lt;TRUC&gt;&quot; Alternatives # un &#39;ac&#39; ou un &#39;er gsub(&quot;ac|er&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;metacaractere&quot;) ## [1] &quot;met&lt;TRUC&gt;ar&lt;TRUC&gt;t&lt;TRUC&gt;e&quot; Anticipations Lors du processus de recherche le moteur positionne un curseur qui suit suit l’tat d’avancement dans le texte. Il est possible de tester si ce qui sera lu plus tard correspondra ou non à un certain sous-motif, mais sans que le curseur soit positionné sur ce sous-motif, c’est à dire sans que ce sous-motif soit consommé pour produire le résultat. # un &#39;a&#39; suivi par &#39;ct&#39; : &#39;ct&#39; n&#39;est pas inclu dans la substitution gsub(&quot;a(?=ct)&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;metacaractere&quot;,perl=TRUE) ## [1] &quot;metacar&lt;TRUC&gt;ctere&quot; # un &#39;a&#39; qui n&#39;est pas suivi par &#39;ct&#39; gsub(&quot;a(?!ct)&quot;,&quot;&lt;TRUC&gt;&quot;,&quot;metacaractere&quot;,perl=TRUE) ## [1] &quot;met&lt;TRUC&gt;c&lt;TRUC&gt;ractere&quot; "]
]
